#!/usr/bin/env bash
# This script was generated by bashly 1.0.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
recipe_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe - Store files/templates in a recipe book to use them anytime!\n"
    echo

  else
    printf "recipe - Store files/templates in a recipe book to use them anytime!\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe COMMAND\n"
  printf "  recipe [COMMAND] --help | -h\n"
  printf "  recipe --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Add a new file to your recipe book\n" "add "
  printf "  %s   Init your recipe book\n" "init"
  printf "  %s   Use a recipe from your recipe book\n" "use "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "EDITOR"
    printf "    Used to controller which editor to use for interactive commands\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "RECIPE_BOOK_DIR"
    printf "    In which directory to store recipes (or ~/recipe-book)\n"
    echo

  fi
}

# :command.usage
recipe_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe add - Add a new file to your recipe book\n"
    echo

  else
    printf "recipe add - Add a new file to your recipe book\n"
    echo

  fi

  printf "Alias: a\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe add PATH [OPTIONS]\n"
  printf "  recipe add --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--file, -f FILE"
    printf "    Use the following file for this recipe\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PATH"
    printf "    Path of the new recipe\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe add work/docker-compose.yaml\n"
    printf "  recipe add ssh-config -f ~/.ssh/config\n"
    echo

  fi
}

# :command.usage
recipe_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe init - Init your recipe book\n"
    echo

  else
    printf "recipe init - Init your recipe book\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe init\n"
  printf "  recipe init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe init\n"
    echo

  fi
}

# :command.usage
recipe_use_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe use - Use a recipe from your recipe book\n"
    echo

  else
    printf "recipe use - Use a recipe from your recipe book\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe use [PATH] [OPTIONS]\n"
  printf "  recipe use --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--destination, -d DESTINATION"
    printf "    Destination path for the recipe\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PATH"
    printf "    Path of the recipe to use\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe use work/docker-compose.yaml\n"
    printf "  recipe use ssh-config -d ~/.ssh/config\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
recipe_add_command() {
  # src/add_command.sh
  echo "# this file is located in 'src/add_command.sh'"
  echo "# code for 'recipe add' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  destination=${args['name']}
  file=${args['--file']}

  function copy_recipe() {
      \cp ${1} ${2} && echo "New recipe added!"
  }

  [[ -f $destination ]] && echo "There is already a recipe with that name." && exit 1

  [[ -n ${file} ]] && copy_recipe ${file} ${destination} ||Â $EDITOR ${destination}

}

# :command.function
recipe_init_command() {
  # src/init_command.sh
  echo "# this file is located in 'src/init_command.sh'"
  echo "# code for 'recipe init' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  recipe_book="${RECIPE_BOOK_DIR:-${HOME}/recipe-book}"

  function run_silent() {
      ${@} 1> /dev/null
  }

  [[ -d ${recipe_book} ]] && echo "You already have a recipe book!" && exit 1

  \mkdir "$recipe_book"

  run_silent pushd "$recipe_book"
  run_silent git init

  run_silent popd
  echo "Your recipe book has been created!"

}

# :command.function
recipe_use_command() {
  # src/use_command.sh
  echo "# this file is located in 'src/use_command.sh'"
  echo "# code for 'recipe use' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        recipe_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v git >/dev/null 2>&1; then
    deps['git']="$(command -v git | head -n1)"
  else
    printf "missing dependency: git\n" >&2
    exit 1
  fi

  if command -v fd >/dev/null 2>&1; then
    deps['fd']="$(command -v fd | head -n1)"
  else
    printf "missing dependency: fd\n" >&2
    exit 1
  fi

  if command -v gum >/dev/null 2>&1; then
    deps['gum']="$(command -v gum | head -n1)"
  else
    printf "missing dependency: gum\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    add | a)
      action="add"
      shift
      recipe_add_parse_requirements "$@"
      shift $#
      ;;

    init | i)
      action="init"
      shift
      recipe_init_parse_requirements "$@"
      shift $#
      ;;

    use | u)
      action="use"
      shift
      recipe_use_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      recipe_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
recipe_add_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --file | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--file']="$2"
          shift
          shift
        else
          printf "%s\n" "--file requires an argument: --file, -f FILE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['path']+x} ]]; then

          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['path']+x} ]]; then
    printf "missing required argument: PATH\nusage: recipe add PATH [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
recipe_use_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_use_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="use"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --destination | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--destination']="$2"
          shift
          shift
        else
          printf "%s\n" "--destination requires an argument: --destination, -d DESTINATION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['path']+x} ]]; then

          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "add") recipe_add_command ;;
    "init") recipe_init_command ;;
    "use") recipe_use_command ;;
  esac
}

initialize
run "$@"
