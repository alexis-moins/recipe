#!/usr/bin/env bash
# This script was generated by bashly 1.1.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
recipe_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe - store redundant files in a recipe book to use them anytime, anywhere\n"
    echo

  else
    printf "recipe - store redundant files in a recipe book to use them anytime, anywhere\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe COMMAND\n"
  printf "  recipe [COMMAND] --help | -h\n"
  printf "  recipe --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Show help about a command\n" "help   "
  printf "  %s   Create a link to the recipe script\n" "link   "
  printf "  %s   Remove the link to the recipe script\n" "unlink "
  printf "  %s   Update recipe to the latest version\n" "update "
  printf "  %s   Show environment information\n" "env    "
  echo
  printf "%s\n" "Recipe Book Commands:"
  printf "  %s   Initialize a recipe book or clone one\n" "init   "
  printf "  %s   Navigate to your recipe book in a new shell\n" "cd     "
  echo
  printf "%s\n" "Recipe Commands:"
  printf "  %s   Add a new recipe\n" "add    "
  printf "  %s   List all your recipes\n" "list   "
  printf "  %s   Use a recipe locally\n" "use    "
  printf "  %s   Remove a recipe\n" "remove "
  printf "  %s   Edit a recipe\n" "edit   "
  printf "  %s   Show the content of a recipe\n" "show   "
  printf "  %s   Interactively filter recipes\n" "filter "
  echo
  printf "%s\n" "Git Commands:"
  printf "  %s   Update your recipe book\n" "sync   "
  printf "  %s   Show the status of your recipe book\n" "status "
  printf "  %s   Stage files\n" "stage  "
  printf "  %s   Unstage files\n" "unstage"
  printf "  %s   Restore unstaged files (undo changes)\n" "restore"
  printf "  %s   Show diff with last commit\n" "diff   "
  printf "  %s   Show interactive diff with last commit\n" "idiff  "
  printf "  %s   Commit changes\n" "commit "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "EDITOR"
    printf "    Editor used for interactive commands\n"
    printf "    Default: vim\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "RECIPE_BOOK_DIR"
    printf "    Directory used to store recipes\n"
    printf "    Default: ${HOME}/recipe-book\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "RECIPE_INSTALL_DIR"
    printf "    Directory where the reporitory was cloned\n"
    printf "    Default: ${HOME}/.recipe\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "RECIPE_SHOW_CMD"
    printf "    Command used to show recipes\n"
    printf "    Default: cat\n"
    echo

  fi
}

# :command.usage
recipe_help_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe help - Show help about a command\n"
    echo

  else
    printf "recipe help - Show help about a command\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe help [COMMAND]\n"
  printf "  recipe help --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMMAND"
    printf "    Help subject\n"
    echo

  fi
}

# :command.usage
recipe_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe init - Initialize a recipe book or clone one\n"
    echo

  else
    printf "recipe init - Initialize a recipe book or clone one\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe init [REPOSITORY] [OPTIONS]\n"
  printf "  recipe init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Overwrite existing recipe book\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "REPOSITORY"
    printf "    Remote repository url\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe init\n"
    printf "  recipe init git@github.com:<username>/recipe-book.git\n"
    echo

  fi
}

# :command.usage
recipe_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe add - Add a new recipe\n"
    echo

  else
    printf "recipe add - Add a new recipe\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe add FILE [NAME] [OPTIONS]\n"
  printf "  recipe add --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--edit, -e"
    printf "    Edit the recipe once it has been added\n"
    echo

    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Overwrite existing recipe\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "FILE"
    printf "    Path to the recipe file\n"
    echo

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Name of the recipe\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe add Dockerfile docker/elixir\n"
    echo

  fi
}

# :command.usage
recipe_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe list - List all your recipes\n"
    echo

  else
    printf "recipe list - List all your recipes\n"
    echo

  fi

  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe list\n"
  printf "  recipe list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe list\n"
    echo

  fi
}

# :command.usage
recipe_use_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe use - Use a recipe locally\n"
    echo

  else
    printf "recipe use - Use a recipe locally\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe use [RECIPE] [DESTINATION] [OPTIONS]\n"
  printf "  recipe use --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--edit, -e"
    printf "    Edit the destination recipe\n"
    echo

    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Overwrite destination file\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "RECIPE"
    printf "    Name of the recipe\n"
    echo

    # :argument.usage
    printf "  %s\n" "DESTINATION"
    printf "    Destination to copy the recipe to\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe use\n"
    printf "  recipe use ssh-config ~/.ssh/config\n"
    echo

  fi
}

# :command.usage
recipe_remove_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe remove - Remove a recipe\n"
    echo

  else
    printf "recipe remove - Remove a recipe\n"
    echo

  fi

  printf "Alias: rm\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe remove [NAME]\n"
  printf "  recipe remove --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Name of the recipe to remove\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe remove\n"
    printf "  recipe remove ssh-config\n"
    echo

  fi
}

# :command.usage
recipe_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe edit - Edit a recipe\n"
    echo

  else
    printf "recipe edit - Edit a recipe\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe edit [NAME]\n"
  printf "  recipe edit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Name of the recipe to edit\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe edit\n"
    printf "  recipe edit ssh-config\n"
    echo

  fi
}

# :command.usage
recipe_link_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe link - Create a link to the recipe script\n"
    echo

  else
    printf "recipe link - Create a link to the recipe script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe link [PATH] [OPTIONS]\n"
  printf "  recipe link --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--copy, -c"
    printf "    Copy the script instead of creating a symbolic link\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PATH"
    printf "    Path to the link\n"
    printf "    Default: ${HOME}/.local/bin\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe link -c\n"
    printf "  recipe link /usr/bin\n"
    echo

  fi
}

# :command.usage
recipe_unlink_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe unlink - Remove the link to the recipe script\n"
    echo

  else
    printf "recipe unlink - Remove the link to the recipe script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe unlink [PATH]\n"
  printf "  recipe unlink --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PATH"
    printf "    Path to the link\n"
    printf "    Default: ${HOME}/.local/bin\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe unlink\n"
    echo

  fi
}

# :command.usage
recipe_show_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe show - Show the content of a recipe\n"
    echo

  else
    printf "recipe show - Show the content of a recipe\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe show [NAME] [OPTIONS]\n"
  printf "  recipe show --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--exec, -e EXECUTABLE"
    printf "    Command used to show the recipe\n"
    printf "    Default: ${RECIPE_SHOW_CMD}\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Name of the recipe\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe show -e bat\n"
    printf "  recipe show docker/express-js\n"
    echo

  fi
}

# :command.usage
recipe_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe update - Update recipe to the latest version\n"
    echo

  else
    printf "recipe update - Update recipe to the latest version\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe update\n"
  printf "  recipe update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
recipe_filter_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe filter - Interactively filter recipes\n"
    echo

  else
    printf "recipe filter - Interactively filter recipes\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe filter\n"
  printf "  recipe filter --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe filter\n"
    echo

  fi
}

# :command.usage
recipe_env_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe env - Show environment information\n"
    echo

  else
    printf "recipe env - Show environment information\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe env [VARIABLE]\n"
  printf "  recipe env --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "VARIABLE"
    printf "    Name of the environment variable to show\n"
    printf "    Allowed: RECIPE_INSTALL_DIR, RECIPE_BOOK_DIR, RECIPE_SHOW_CMD\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe env\n"
    printf "  recipe env RECIPE_INSTALL_DIR\n"
    echo

  fi
}

# :command.usage
recipe_sync_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe sync - Update your recipe book\n"
    echo

  else
    printf "recipe sync - Update your recipe book\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe sync\n"
  printf "  recipe sync --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe sync\n"
    echo

  fi
}

# :command.usage
recipe_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe status - Show the status of your recipe book\n"
    echo

  else
    printf "recipe status - Show the status of your recipe book\n"
    echo

  fi

  printf "Alias: st\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe status [OPTIONS]\n"
  printf "  recipe status --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--short, -s"
    printf "    Give the output in a short format\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe status\n"
    echo

  fi
}

# :command.usage
recipe_stage_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe stage - Stage files\n"
    echo

  else
    printf "recipe stage - Stage files\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe stage [FILES...]\n"
  printf "  recipe stage --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to stage (relative to \$RECIPE_BOOK_DIR)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe stage\n"
    echo

  fi
}

# :command.usage
recipe_unstage_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe unstage - Unstage files\n"
    echo

  else
    printf "recipe unstage - Unstage files\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe unstage [FILES...]\n"
  printf "  recipe unstage --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to unstage (relative to \$RECIPE_BOOK_DIR)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe unstage\n"
    echo

  fi
}

# :command.usage
recipe_restore_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe restore - Restore unstaged files (undo changes)\n"
    echo

  else
    printf "recipe restore - Restore unstaged files (undo changes)\n"
    echo

  fi

  printf "Alias: rs\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe restore [FILES...]\n"
  printf "  recipe restore --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to restore (relative to \$RECIPE_BOOK_DIR)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe restore\n"
    echo

  fi
}

# :command.usage
recipe_diff_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe diff - Show diff with last commit\n"
    echo

  else
    printf "recipe diff - Show diff with last commit\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe diff [OPTIONS] [FILES...]\n"
  printf "  recipe diff --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--staged, -s"
    printf "    Only show diff for staged files\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to diff (relative to \$RECIPE_BOOK_DIR)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe diff\n"
    printf "  recipe diff --staged\n"
    echo

  fi
}

# :command.usage
recipe_idiff_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe idiff - Show interactive diff with last commit\n"
    echo

  else
    printf "recipe idiff - Show interactive diff with last commit\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe idiff [OPTIONS]\n"
  printf "  recipe idiff --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--staged, -s"
    printf "    Only show diff for staged files\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe idiff\n"
    printf "  recipe idiff --staged\n"
    echo

  fi
}

# :command.usage
recipe_commit_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe commit - Commit changes\n"
    echo

  else
    printf "recipe commit - Commit changes\n"
    echo

  fi

  printf "Alias: ci\n"
  echo

  printf "%s\n" "Usage:"
  printf "  recipe commit [MESSAGE]\n"
  printf "  recipe commit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "MESSAGE"
    printf "    Commit message\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe commit\n"
    echo

  fi
}

# :command.usage
recipe_cd_usage() {
  if [[ -n $long_usage ]]; then
    printf "recipe cd - Navigate to your recipe book in a new shell\n"
    echo

  else
    printf "recipe cd - Navigate to your recipe book in a new shell\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  recipe cd\n"
  printf "  recipe cd --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  recipe cd\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/clean_directory.sh
clean_directory() {
    if [[ -d "${1}" ]] && [[ -z "$(ls -A "${1}")" ]]; then
        run_silent rmdir "${1}"
    fi
}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/filter_recipe.sh
filter_recipe() {
    local recipes="$(find_recipe)"
    echo "${recipes}" | gum filter --placeholder "Select a recipe..."
}

# src/lib/filters/filter_recipe_book_is_dir.sh
filter_recipe_book_is_dir() {
    if [[ ! -d "${RECIPE_BOOK_DIR}" ]]; then
        error "your recipe book is missing at \$RECIPE_BOOK_DIR"
        error "consider using $(red_underlined "recipe init")"
    fi
}

# src/lib/filters/filter_recipe_book_is_git.sh
filter_recipe_book_is_git() {
    if [[ ! -d "${RECIPE_BOOK_DIR}/.git" ]]; then
        error "your recipe book is not a git repository"
        error "consider using $(yellow_underlined "recipe init")"
    fi
}

# src/lib/filters/filter_recipe_book_not_empty.sh
filter_recipe_book_not_empty() {
    if [[ -z "$(find_recipe)" ]]; then
        error "your recipe book is empty"
    fi
}

# src/lib/find_recipe.sh
find_recipe() {
    local recipes=$( run_git ls-files --others --cached --modified)

    if [[ -n "${recipes}" ]]; then
        echo "${recipes}"
    fi
}

# src/lib/interactive_diff.sh
interactive_diff() {
    candidates="$(run_git ls-files -mo --exclude-standard --full-name )"
    [[ -z "${candidates}" ]] && info 'no changes to diff' && return 0

    local files="$(echo "${candidates}" | gum filter --placeholder="Select files to diff" --no-limit)"
    [[ -z "${files}" ]] && return 0

    run_git diff "${files}"
}

# src/lib/interactive_staged_diff.sh
interactive_staged_diff() {
    candidates="$(run_git diff --cached --name-only)"
    [[ -z "${candidates}" ]] && info 'no staged changes to diff' && return 0

    local files="$(echo "${candidates}" | gum filter --placeholder="Select files to diff" --no-limit)"
    [[ -z "${files}" ]] && return 0

    run_git diff --staged "${files}"
}

# src/lib/log/error.sh
error() {
    echo "$(red "recipe:") ${1}"
}

# src/lib/log/info.sh
info() {
    echo "$(blue "recipe:") ${1}"
}

# src/lib/log/success.sh
success() {
    echo "$(green "recipe:") ${1}"
}

# src/lib/log/warn.sh
warn() {
    echo "$(yellow "recipe:") ${1}"
}

# src/lib/run_git.sh
run_git() {
    command "${deps[git]}" -C "${RECIPE_BOOK_DIR}" ${@}
}

# src/lib/run_silent.sh
run_silent() {
  command ${@} &> /dev/null
}

# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

# src/lib/validations/validate_recipe_exists.sh
validate_recipe_exists() {
    [[ -f "${RECIPE_BOOK_DIR}/$1" ]] || echo "must be an existing recipe"
}

# src/lib/validations/validate_recipe_missing.sh
validate_recipe_missing() {
    [[ ! -f "${RECIPE_BOOK_DIR}/$1" ]] || echo "Your recipe book already contains that recipe."
}

# :command.command_functions
# :command.function
recipe_help_command() {
  # src/help_command.sh
  command="${args[command]:-}"
  long_usage=yes

  if [[ -z "$command" ]]; then
    # No command argument, show the global help
    help_function=recipe_usage
  else
    # Show the help for the requested command
    help_function="recipe_${command}_usage"
  fi

  # Call the help function if it exists
  if [[ $(type -t "$help_function") ]]; then
    "$help_function"
  else
    echo "No help available for this command"
    exit 1
  fi

}

# :command.function
recipe_init_command() {
  # src/init_command.sh
  local force="${args[--force]}"
  local repository="${args[repository]}"

  if [[ -d "${RECIPE_BOOK_DIR}" ]]; then
      if [[ -z "${force}" ]]; then
          error "\$RECIPE_BOOK_DIR is not empty"
          exit 1
      else
          command rm -rf "${RECIPE_BOOK_DIR}"
      fi
  fi

  if [[ -n "${repository}" ]]; then
      command "${deps[git]}" clone "${repository}" "${RECIPE_BOOK_DIR}"
      success "cloned remote recipe book"
  else
      command mkdir -p "${RECIPE_BOOK_DIR}"
      run_git init

      success "initialized empty recipe book"
  fi

}

# :command.function
recipe_add_command() {
  # src/add_command.sh
  local file="${args[file]}"
  local recipe="${args[name]:-$(basename "${file}")}"

  local edit="${args[--edit]}"
  local force="${args[--force]}"

  if [[ -f "${RECIPE_BOOK_DIR}/${recipe}" ]] && [[ -z "${force}" ]]; then
      error "your recipe book already contains that recipe" && exit 1
  fi

  # Full destination path to the recipe
  local destination_path="${RECIPE_BOOK_DIR}/${recipe}"

  if [[ "${recipe}" = */* ]]; then
      local recipe_dir="$(dirname "${recipe}")"

      # Directory in which the recipe will be stored
      local destination_dir="${RECIPE_BOOK_DIR}/${recipe_dir}"

      # Create intermediary directories if needed
      if [[ ! -d "${destination_dir}" ]]; then
          command mkdir -p "${destination_dir}"
      fi
  fi

  command cp "${file}" "${destination_path}"

  # Edit the file if the --edit flag was passed
  [[ -n "${edit}" ]] && command "${EDITOR}" "${destination_path}"

  if [[ -f "${destination_path}" ]]; then
      success "added new recipe ${recipe}"
  else
      clean_directory "${destination_dir}"
      error "recipe not added"
      exit 1
  fi

}

# :command.function
recipe_list_command() {
  # src/list_command.sh
  find_recipe

}

# :command.function
recipe_use_command() {
  # src/use_command.sh
  local recipe="${args[recipe]}"
  local destination="${args[destination]}"

  local edit="${args[--edit]}"
  local force="${args[--force]}"

  if [[ -z "${recipe}" ]]; then
      recipe="$(filter_recipe)"

      [[ -z "${recipe}" ]] && exit 1
  fi

  if [[ -z "${destination}" ]]; then
      placeholder="$(basename "${recipe}")"

      destination="$(command "${deps[gum]}" input --placeholder="recipe=${recipe}" --width=0 --prompt="◉ Destination: " --no-show-help)"

      [[ -z "${destination}" ]] && exit 1
  fi

  if [[ -f "${destination}" ]] && [[ -z "${force}" ]]; then
      error "recipe would overwrite ${destination}"
      exit 1
  fi

  destination_dir="$(dirname "${destination}")"

  if [[ ! "${destination_dir}" == '.' ]] && [[ ! -d "${destination_dir}" ]]; then
      command mkdir -p "${destination_dir}"
  fi

  command cp -f "${RECIPE_BOOK_DIR}/${recipe}" "${destination}"
  success "recipe ${destination} is ready to use"

  [[ -n "${edit}" ]] && command "${EDITOR}" "${destination}"

}

# :command.function
recipe_remove_command() {
  # src/remove_command.sh
  local recipe=${args['name']}

  [[ -z "${recipe}" ]] && recipe="$(filter_recipe)"

  local recipe_dir="$(dirname ${recipe})"

  # Full destination path to the recipe
  local destination_path="${RECIPE_BOOK_DIR}/${recipe}"

  # Directory in which the recipe will be stored
  local destination_dir="${RECIPE_BOOK_DIR}/${recipe_dir}"

  run_silent rm "${destination_path}"
  clean_directory "${destination_dir}"

  success "removed recipe ${recipe}"

}

# :command.function
recipe_edit_command() {
  # src/edit_command.sh
  local recipe="${args[name]}"

  [[ -z "${recipe}" ]] && recipe="$(filter_recipe)"

  local recipe_dir="$(dirname ${recipe})"

  # Full destination path to the recipe
  local destination_path="${RECIPE_BOOK_DIR}/${recipe}"

  # Directory in which the recipe will be stored
  local destination_dir="${RECIPE_BOOK_DIR}/${recipe_dir}"

  command "${EDITOR}" "${destination_path}"

}

# :command.function
recipe_link_command() {
  # src/link_command.sh
  local path="${args[path]}"
  local copy="${args[--copy]}"

  local source="${RECIPE_INSTALL_DIR}"

  if [[ -f "${path}/recipe" ]]; then
      error "there is already a link in ${path}"
      exit 1
  fi

  if [[ ! -d "${source}" ]]; then
      error "source directory ${source} does not exist"
      exit 1
  fi

  if [[ ! -f "${source}/recipe" ]]; then
      error "script 'recipe' not found in ${source}"
      exit 1
  fi

  local executable=`test -n "${copy}" && echo "cp" || echo "ln -s"`

  command ${executable} "${source}/recipe" "${path}/recipe"
  success "link created in ${path}"

}

# :command.function
recipe_unlink_command() {
  # src/unlink_command.sh
  local path="${args[path]}"

  if [[ -f "${path}/recipe" ]]; then
      run_silent rm -rf "${path}/recipe"
      success "link removed from ${path}"
  else
      error "no link found in ${path}"
      exit 1
  fi

}

# :command.function
recipe_show_command() {
  # src/show_command.sh
  local recipe="${args[name]}"
  local command="${args[--exec]}"

  [[ -z "${recipe}" ]] && recipe="$(filter_recipe)"

  # Full destination path to the recipe
  local destination_path="${RECIPE_BOOK_DIR}/${recipe}"

  command ${command} "${destination_path}"

}

# :command.function
recipe_update_command() {
  # src/update_command.sh
  if [[ ! -d "${RECIPE_INSTALL_DIR}" ]]; then
      warn "No recipe install directory."
      warn "Check documentation for installation instruction."
      exit 1
  fi

  git -C "${RECIPE_INSTALL_DIR}" pull

}

# :command.function
recipe_filter_command() {
  # src/filter_command.sh
  local recipes="$(find_recipe)"

  echo "${recipes}" | gum filter --placeholder "Select a recipe..."

}

# :command.function
recipe_env_command() {
  # src/env_command.sh
  local variable="${args[variable]}"

  if [[ -n "${variable}" ]]; then
      echo "${!variable}"
  else
      echo "RECIPE_INSTALL_DIR=${RECIPE_INSTALL_DIR}"
      echo "RECIPE_BOOK_DIR=${RECIPE_BOOK_DIR}"
      echo "RECIPE_SHOW_CMD=${RECIPE_SHOW_CMD}"
  fi

}

# :command.function
recipe_sync_command() {
  # src/sync_command.sh
  run_git pull --rebase && run_git push

}

# :command.function
recipe_status_command() {
  # src/status_command.sh
  local short="${args[--short]}"

  if [[ -n "${short}" ]]; then
      run_git status --short
  else
      run_git status
  fi

}

# :command.function
recipe_stage_command() {
  # src/stage_command.sh
  if [[ -n "${other_args[*]}" ]]; then
      run_git add ${other_args[*]} && success "staged ${other_args[*]}"
  else
      candidates="$(run_git ls-files -mo --exclude-standard --full-name)"

      [[ -z "${candidates}" ]] && info "no changes to stage" && exit 0

      local files="$(echo "${candidates}" \
          | tr ' ' '\n' \
          | gum filter --no-limit --fuzzy --placeholder="Select files to stage" )"

      [[ -z "${files}" ]] && exit 0

      files="$(echo "${files}" | tr '\n' ' ')"

      run_git add ${files} \
          && success "staged ${files}"
  fi

}

# :command.function
recipe_unstage_command() {
  # src/unstage_command.sh
  if [[ -n "${other_args[*]}" ]]; then
      run_git restore --staged ${other_args[*]} && success "unstaged ${other_args[*]}"
  else
      candidates="$(run_git diff --cached --name-only)"

      [[ -z "${candidates}" ]] && info "no changes to unstage" && return 0

      local files="$(echo "${candidates}" \
          | tr ' ' '\n' \
          | gum filter --no-limit --fuzzy --placeholder="Select files to unstage" )"

      [[ -z "${files}" ]] && return 0

      files="$(echo "${files}" | tr '\n' ' ')"

      run_git restore --staged ${files} \
          && success "unstaged ${files}"
  fi

}

# :command.function
recipe_restore_command() {
  # src/restore_command.sh
  if [[ -n "${other_args[*]}" ]]; then
      run_git restore ${other_args[*]} && success "restored ${other_args[*]}"
  else
      candidates="$(run_git ls-files -mo --exclude-standard --full-name)"

      [[ -z "${candidates}" ]] && info "no changes to restore" && exit 0

      local files="$(echo "${candidates}" \
          | tr ' ' '\n' \
          | gum filter --no-limit --fuzzy --placeholder="Files to restore...")"

      [[ -z "${files}" ]] && exit 0

      files="$(echo "${files}" | tr '\n' ' ')"

      run_git restore ${files} && success "restored ${files}"
  fi

}

# :command.function
recipe_diff_command() {
  # src/diff_command.sh
  local files="${other_args[*]}"
  local staged="${args[--staged]}"

  if [[ -n "${files}" ]]; then
      if [[ -n "${staged}" ]]; then
          run_git diff --staged ${files}
      else
          run_git diff ${files}
      fi
  else
      if [[ -z "${staged}" ]]; then
          run_git diff
      else
          run_git diff --staged
      fi
  fi

}

# :command.function
recipe_idiff_command() {
  # src/idiff_command.sh
  local staged="${args[--staged]}"

  if [[ -n "${staged}" ]]; then
      interactive_staged_diff
  else
      interactive_diff
  fi

}

# :command.function
recipe_commit_command() {
  # src/commit_command.sh
  local message="${args[message]}"

  if [[ -n "${message}" ]]; then
      "${deps[git]}" -C "${DOTFILES_DIR}" commit -m "${message}"
  else
      run_git commit
  fi

}

# :command.function
recipe_cd_command() {
  # src/cd_command.sh
  command cd "${RECIPE_BOOK_DIR}" && command "${SHELL}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        recipe_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export EDITOR="${EDITOR:-vim}"
  export RECIPE_BOOK_DIR="${RECIPE_BOOK_DIR:-${HOME}/recipe-book}"
  export RECIPE_INSTALL_DIR="${RECIPE_INSTALL_DIR:-${HOME}/.recipe}"
  export RECIPE_SHOW_CMD="${RECIPE_SHOW_CMD:-cat}"

  env_var_names+=("EDITOR")
  env_var_names+=("RECIPE_BOOK_DIR")
  env_var_names+=("RECIPE_INSTALL_DIR")
  env_var_names+=("RECIPE_SHOW_CMD")

  # :command.dependencies_filter
  if command -v git >/dev/null 2>&1; then
    deps['git']="$(command -v git | head -n1)"
  else
    printf "missing dependency: git\n" >&2
    exit 1
  fi

  if command -v gum >/dev/null 2>&1; then
    deps['gum']="$(command -v gum | head -n1)"
  else
    printf "missing dependency: gum\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    help)
      action="help"
      shift
      recipe_help_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      recipe_init_parse_requirements "$@"
      shift $#
      ;;

    add)
      action="add"
      shift
      recipe_add_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      recipe_list_parse_requirements "$@"
      shift $#
      ;;

    use)
      action="use"
      shift
      recipe_use_parse_requirements "$@"
      shift $#
      ;;

    remove | rm)
      action="remove"
      shift
      recipe_remove_parse_requirements "$@"
      shift $#
      ;;

    edit)
      action="edit"
      shift
      recipe_edit_parse_requirements "$@"
      shift $#
      ;;

    link)
      action="link"
      shift
      recipe_link_parse_requirements "$@"
      shift $#
      ;;

    unlink)
      action="unlink"
      shift
      recipe_unlink_parse_requirements "$@"
      shift $#
      ;;

    show)
      action="show"
      shift
      recipe_show_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      recipe_update_parse_requirements "$@"
      shift $#
      ;;

    filter)
      action="filter"
      shift
      recipe_filter_parse_requirements "$@"
      shift $#
      ;;

    env)
      action="env"
      shift
      recipe_env_parse_requirements "$@"
      shift $#
      ;;

    sync)
      action="sync"
      shift
      recipe_sync_parse_requirements "$@"
      shift $#
      ;;

    status | st)
      action="status"
      shift
      recipe_status_parse_requirements "$@"
      shift $#
      ;;

    stage)
      action="stage"
      shift
      recipe_stage_parse_requirements "$@"
      shift $#
      ;;

    unstage)
      action="unstage"
      shift
      recipe_unstage_parse_requirements "$@"
      shift $#
      ;;

    restore | rs)
      action="restore"
      shift
      recipe_restore_parse_requirements "$@"
      shift $#
      ;;

    diff)
      action="diff"
      shift
      recipe_diff_parse_requirements "$@"
      shift $#
      ;;

    idiff)
      action="idiff"
      shift
      recipe_idiff_parse_requirements "$@"
      shift $#
      ;;

    commit | ci)
      action="commit"
      shift
      recipe_commit_parse_requirements "$@"
      shift $#
      ;;

    cd)
      action="cd"
      shift
      recipe_cd_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      recipe_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
recipe_help_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_help_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="help"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
recipe_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['repository']+x} ]]; then
          args['repository']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
recipe_add_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --edit | -e)

        # :flag.case_no_arg
        args['--edit']=1
        shift
        ;;

      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['file']+x} ]]; then
          args['file']=$1
          shift
        elif [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['file']+x} ]]; then
    printf "missing required argument: FILE\nusage: recipe add FILE [NAME] [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.validations
  # :argument.validations
  if [[ -v args['file'] && -n $(validate_file_exists "${args['file']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "FILE" "$(validate_file_exists "${args['file']:-}")" >&2
    exit 1
  fi

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_use_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_use_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="use"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --edit | -e)

        # :flag.case_no_arg
        args['--edit']=1
        shift
        ;;

      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['recipe']+x} ]]; then
          args['recipe']=$1
          shift
        elif [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.validations
  # :argument.validations
  if [[ -v args['recipe'] && -n $(validate_recipe_exists "${args['recipe']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "RECIPE" "$(validate_recipe_exists "${args['recipe']:-}")" >&2
    exit 1
  fi

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_not_empty)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_remove_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.validations
  # :argument.validations
  if [[ -v args['name'] && -n $(validate_recipe_exists "${args['name']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "NAME" "$(validate_recipe_exists "${args['name']:-}")" >&2
    exit 1
  fi

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_not_empty)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_edit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="edit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.validations
  # :argument.validations
  if [[ -v args['name'] && -n $(validate_recipe_exists "${args['name']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "NAME" "$(validate_recipe_exists "${args['name']:-}")" >&2
    exit 1
  fi

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_not_empty)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_link_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_link_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="link"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --copy | -c)

        # :flag.case_no_arg
        args['--copy']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['path']:-} ]] || args['path']="${HOME}/.local/bin"

}

# :command.parse_requirements
recipe_unlink_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_unlink_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="unlink"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['path']:-} ]] || args['path']="${HOME}/.local/bin"

}

# :command.parse_requirements
recipe_show_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_show_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="show"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --exec | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--exec']="$2"
          shift
          shift
        else
          printf "%s\n" "--exec requires an argument: --exec, -e EXECUTABLE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--exec']:-} ]] || args['--exec']="${RECIPE_SHOW_CMD}"

  # :command.validations
  # :argument.validations
  if [[ -v args['name'] && -n $(validate_recipe_exists "${args['name']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "NAME" "$(validate_recipe_exists "${args['name']:-}")" >&2
    exit 1
  fi

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_not_empty)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
recipe_filter_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_filter_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="filter"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_not_empty)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_env_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_env_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="env"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['variable']+x} ]]; then
          args['variable']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.whitelist_filter
  if [[ -n ${args['variable']:-} ]] && [[ ! ${args['variable']:-} =~ ^(RECIPE_INSTALL_DIR|RECIPE_BOOK_DIR|RECIPE_SHOW_CMD)$ ]]; then
    printf "%s\n" "variable must be one of: RECIPE_INSTALL_DIR, RECIPE_BOOK_DIR, RECIPE_SHOW_CMD" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_sync_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_sync_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="sync"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_status_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_status_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="status"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --short | -s)

        # :flag.case_no_arg
        args['--short']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_stage_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_stage_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stage"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_unstage_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_unstage_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="unstage"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="restore"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_diff_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_diff_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="diff"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --staged | -s)

        # :flag.case_no_arg
        args['--staged']=1
        shift
        ;;

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_idiff_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_idiff_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="idiff"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --staged | -s)

        # :flag.case_no_arg
        args['--staged']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_commit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_commit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="commit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['message']+x} ]]; then
          args['message']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
recipe_cd_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        recipe_cd_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="cd"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_recipe_book_is_dir)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_recipe_book_is_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="1.6.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export EDITOR="${EDITOR:-vim}"
  export RECIPE_BOOK_DIR="${RECIPE_BOOK_DIR:-${HOME}/recipe-book}"
  export RECIPE_INSTALL_DIR="${RECIPE_INSTALL_DIR:-${HOME}/.recipe}"
  export RECIPE_SHOW_CMD="${RECIPE_SHOW_CMD:-cat}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "help") recipe_help_command ;;
    "init") recipe_init_command ;;
    "add") recipe_add_command ;;
    "list") recipe_list_command ;;
    "use") recipe_use_command ;;
    "remove") recipe_remove_command ;;
    "edit") recipe_edit_command ;;
    "link") recipe_link_command ;;
    "unlink") recipe_unlink_command ;;
    "show") recipe_show_command ;;
    "update") recipe_update_command ;;
    "filter") recipe_filter_command ;;
    "env") recipe_env_command ;;
    "sync") recipe_sync_command ;;
    "status") recipe_status_command ;;
    "stage") recipe_stage_command ;;
    "unstage") recipe_unstage_command ;;
    "restore") recipe_restore_command ;;
    "diff") recipe_diff_command ;;
    "idiff") recipe_idiff_command ;;
    "commit") recipe_commit_command ;;
    "cd") recipe_cd_command ;;
  esac
}

initialize
run "$@"
